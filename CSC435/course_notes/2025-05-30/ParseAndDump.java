/*
 * ParseAndDump.java
 *
 * Demo code to show the interaction between the parser,
 * the visitor pattern, and the use of an AST built as
 * a result of the visitor's actions.
 *
 */

/* This code assumes that the most recent version of ANTLR4 
 * is already available (as of this writing -- 2025-05-26 -- version
 * 4.13.2 from https://www.antlr.org/).  In practical terms this
 * means that the file `antlr-4.13.2-complete.jar` is in your
 * development environments CLASSPATH.
 *
 * This code *also* assumes that a class file named MakeASTVisitor
 * -- which is an implemented of CeelishBaseVisitor -- is also
 * available. (You will, of course, need to complete MakeASTVisitor
 * as part of your work for A#1.) CeelishBaseVisitor is itself
 * generated by ANTLR4 from the Ceelish.g4 file.
 *
 */

import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.tree.*;
import org.antlr.v4.runtime.misc.*;
import java.io.*;

public class ParseAndDump {

	public static void main (String[] args) throws Exception {
        String inputFile = null;
        if ( args.length > 0 ) {
            inputFile = args[0];
        }
        InputStream is = System.in;
        if ( inputFile != null ) {
            is = new FileInputStream(inputFile);
        }

        CharStream input = CharStreams.fromStream(is);
        SmallLangLexer lexer = new SmallLangLexer(input);
        CommonTokenStream tokens = new CommonTokenStream(lexer);
        SmallLangParser parser = new SmallLangParser(tokens);

        parser.setBuildParseTree(true);
        ParseTree tree = parser.prog();
        MakeASTVisitor build = new MakeASTVisitor();
        ASTNode ast = build.visit(tree);
        ast.print();

    }
}
